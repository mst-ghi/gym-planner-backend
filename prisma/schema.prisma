generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid()) @db.VarChar(164)
  mobile        String   @unique @db.VarChar(30)
  email         String?  @unique @db.VarChar(150)
  national_code String?  @db.VarChar(20)
  fullname      String?  @db.VarChar(150)
  password      String?  @db.VarChar(150)
  kind          String   @default("athlete") @db.VarChar(50)
  status        String   @default("active") @db.VarChar(50)
  verify_email  Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  profile         Profile?
  medicalRecord   MedicalRecord?
  tokens          Token[]
  otp             Otp[]
  teams           Team[]
  userPlans       UserPlan[]
  peyments        Payment[]
  posts           Post[]
  likes           Like[]
  workoutPrograms WorkoutProgram[]
  foodPrograms    FoodProgram[]
  weights         UserWeight[]

  @@index([mobile, email])
  @@map("users")
}

model Profile {
  id             String    @id @default(cuid()) @db.VarChar(164)
  user_id        String    @unique @db.VarChar(164)
  avatar_url     String?   @db.VarChar(255)
  gender         String?   @db.VarChar(50)
  blood_type     String?   @db.VarChar(20)
  marital_status String?   @db.VarChar(50)
  job            String?   @db.VarChar(50)
  education      String?   @db.VarChar(150)
  address        String?   @db.VarChar(255)
  weight         Int?      @db.SmallInt
  height         Int?      @db.SmallInt
  birth_day      DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("user_profiles")
}

model Token {
  id                 String   @id @default(cuid()) @db.VarChar(164)
  user_id            String   @db.VarChar(164)
  refresh_token      String   @unique @db.VarChar(100)
  access_token       String   @unique @db.VarChar(100)
  invoked            Boolean  @default(false)
  expires_at         DateTime
  refresh_expires_at DateTime
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@index([refresh_token, access_token, expires_at, refresh_expires_at])
  @@map("tokens")
}

model Otp {
  id         String   @id @default(cuid()) @db.VarChar(164)
  user_id    String   @db.VarChar(164)
  code       String   @db.VarChar(10)
  hash       String   @unique @db.VarChar(100)
  invoked    Boolean  @default(false)
  expires_at DateTime
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@index([hash])
  @@map("otp")
}

model Workspace {
  id         String   @id @default(cuid()) @db.VarChar(164)
  key        String   @unique @db.VarChar(64)
  title      String?  @db.VarChar(150)
  status     String   @default("active") @db.VarChar(50)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  teams Team[]

  @@index([key, status])
  @@map("workspaces")
}

model Media {
  id           String    @id @default(cuid()) @db.VarChar(164)
  workspace_id String?   @db.VarChar(164)
  user_id      String    @db.VarChar(164)
  originalname String    @db.VarChar(255)
  mimetype     String    @db.VarChar(50)
  filename     String    @db.VarChar(150)
  url          String    @db.VarChar(255)
  storage      String    @db.VarChar(40)
  size         Float
  deleted_at   DateTime?
  created_at   DateTime  @default(now())

  @@index([workspace_id, user_id, url])
  @@map("medias")
}

model Team {
  id           String   @id @default(cuid()) @db.VarChar(164)
  workspace_id String   @db.VarChar(164)
  user_id      String   @db.VarChar(164)
  role         String   @default("owner") @db.VarChar(50)
  selected     Boolean  @default(true)
  created_at   DateTime @default(now())

  workspace Workspace @relation(fields: [workspace_id], references: [id])
  user      User      @relation(fields: [user_id], references: [id])

  @@index([workspace_id, user_id])
  @@map("teams")
}

model Plan {
  id           String   @id @default(cuid()) @db.VarChar(164)
  workspace_id String?  @db.VarChar(164)
  priority     Int      @db.SmallInt
  title        String   @db.VarChar(150)
  price        Float    @default(0)
  discount     Int?     @default(0) @db.SmallInt
  period_type  String   @default("month") @db.VarChar(30)
  period_value Int      @db.SmallInt
  description  String   @db.VarChar(255)
  cover_url    String?  @db.VarChar(255)
  status       String   @default("active") @db.VarChar(50)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  payments  Payment[]
  userPlans UserPlan[]

  @@map("plans")
}

model Payment {
  id             String   @id @default(cuid()) @db.VarChar(164)
  user_id        String   @db.VarChar(164)
  plan_id        String   @db.VarChar(164)
  total_price    Float    @default(0)
  discount_price Float    @default(0)
  meta           Json
  status         String   @default("created") @db.VarChar(50)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  user     User      @relation(fields: [user_id], references: [id])
  plan     Plan      @relation(fields: [plan_id], references: [id])
  userPlan UserPlan?

  @@index([user_id, plan_id, status])
  @@map("payments")
}

model UserPlan {
  id             String    @id @default(cuid()) @db.VarChar(164)
  workspace_id   String?   @db.VarChar(164)
  user_id        String    @db.VarChar(164)
  plan_id        String    @db.VarChar(164)
  payment_id     String    @unique @db.VarChar(164)
  plan_snapshot  Json
  status         String    @default("avtive") @db.VarChar(50)
  reservation_at DateTime?
  expires_at     DateTime
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt

  user    User    @relation(fields: [user_id], references: [id])
  plan    Plan    @relation(fields: [plan_id], references: [id])
  payment Payment @relation(fields: [payment_id], references: [id])

  @@index([user_id, plan_id, payment_id, status])
  @@map("user_plans")
}

model MedicalRecord {
  id                        String   @id @default(cuid()) @db.VarChar(164)
  user_id                   String   @unique @db.VarChar(164)
  workspace_id              String?  @db.VarChar(164)
  practice_history          String?  @db.VarChar(100)
  taking_sports_supplements String?  @db.VarChar(100)
  history_of_bone_fracture  String?  @db.VarChar(100)
  food_allergy              String?  @db.VarChar(100)
  wake_up_time              String?  @db.VarChar(40)
  breakfast_time            String?  @db.VarChar(40)
  lunch_time                String?  @db.VarChar(40)
  dinner_time               String?  @db.VarChar(40)
  sleeping_time             String?  @db.VarChar(40)
  practice_time             String?  @db.VarChar(40)
  note                      String?  @db.VarChar(255)
  front_media_url           String?  @db.VarChar(350)
  right_media_url           String?  @db.VarChar(350)
  left_media_url            String?  @db.VarChar(350)
  back_media_url            String?  @db.VarChar(350)
  front_arm_media_url       String?  @db.VarChar(350)
  back_arm_media_url        String?  @db.VarChar(350)
  created_at                DateTime @default(now())
  updated_at                DateTime @default(now()) @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@index([workspace_id])
  @@map("medical_records")
}

model Post {
  id         String   @id @default(cuid()) @db.VarChar(164)
  owner_id   String   @db.VarChar(164)
  cover_url  String?  @db.VarChar(350)
  title      String   @db.VarChar(255)
  content    String   @db.Text
  tags       String   @db.VarChar(300)
  status     String   @default("avtive") @db.VarChar(50)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  owner User   @relation(fields: [owner_id], references: [id])
  likes Like[]

  @@index([tags])
  @@map("posts")
}

model Like {
  id      String @id @default(cuid()) @db.VarChar(164)
  post_id String @db.VarChar(164)
  user_id String @db.VarChar(164)

  post Post @relation(fields: [post_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@map("likes")
}

model BodyPart {
  id           String   @id @default(cuid()) @db.VarChar(164)
  workspace_id String?  @db.VarChar(164)
  title        String   @db.VarChar(100)
  description  String?  @db.VarChar(350)
  media_url    String?  @db.VarChar(350)
  level        String   @default("beginner") @db.VarChar(50)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  exercises Exercise[]

  @@index([workspace_id])
  @@map("body_parts")
}

model Equipment {
  id           String   @id @default(cuid()) @db.VarChar(164)
  workspace_id String?  @db.VarChar(164)
  title        String   @db.VarChar(200)
  title_en     String?  @db.VarChar(200)
  description  String?  @db.VarChar(350)
  media_url    String?  @db.VarChar(350)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  exercises Exercise[]

  @@map("equipments")
}

model Exercise {
  id           String   @id @default(cuid()) @db.VarChar(164)
  body_part_id String   @db.VarChar(164)
  equipment_id String?  @db.VarChar(164)
  title        String   @db.VarChar(250)
  title_en     String   @db.VarChar(250)
  cover_url    String?  @db.VarChar(350)
  media_url    String?  @db.VarChar(350)
  description  String?  @db.Text
  gender       String?  @db.VarChar(50)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  bodyPart            BodyPart             @relation(fields: [body_part_id], references: [id])
  equipment           Equipment?           @relation(fields: [equipment_id], references: [id])
  workoutProgramItems WorkoutProgramItem[]

  @@map("exercises")
}

model WorkoutProgram {
  id           String    @id @default(cuid()) @db.VarChar(164)
  workspace_id String?   @db.VarChar(164)
  user_plan_id String?   @db.VarChar(164)
  couch_id     String    @db.VarChar(164)
  user_id      String?   @db.VarChar(164)
  title        String    @db.VarChar(200)
  description  String?   @db.VarChar(350)
  voice_url    String?   @db.VarChar(350)
  status       String    @default("active") @db.VarChar(50)
  started_at   DateTime?
  ended_at     DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt

  user  User?                @relation(fields: [user_id], references: [id])
  items WorkoutProgramItem[]

  @@map("workout_programs")
}

model WorkoutProgramItem {
  id          String   @id @default(cuid()) @db.VarChar(164)
  program_id  String   @db.VarChar(164)
  exercise_id String   @db.VarChar(164)
  day         Int      @default(1) @db.SmallInt
  priority    Int      @default(0) @db.SmallInt
  frequency   Int      @default(1) @db.SmallInt
  times       Int      @default(10) @db.SmallInt
  is_super    Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  program  WorkoutProgram @relation(fields: [program_id], references: [id])
  exercise Exercise       @relation(fields: [exercise_id], references: [id])

  @@map("workout_program_items")
}

model FoodProgram {
  id           String    @id @default(cuid()) @db.VarChar(164)
  workspace_id String?   @db.VarChar(164)
  user_plan_id String?   @db.VarChar(164)
  couch_id     String    @db.VarChar(164)
  user_id      String?   @db.VarChar(164)
  title        String    @db.VarChar(200)
  description  String?   @db.VarChar(350)
  status       String    @default("active") @db.VarChar(50)
  started_at   DateTime?
  ended_at     DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt

  user  User?             @relation(fields: [user_id], references: [id])
  items FoodProgramItem[]

  @@map("food_programs")
}

model FoodProgramItem {
  id         String   @id @default(cuid()) @db.VarChar(164)
  program_id String   @db.VarChar(164)
  cause      String   @db.VarChar(164)
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  program FoodProgram @relation(fields: [program_id], references: [id])

  @@map("food_program_items")
}

model UserWeight {
  id           String   @id @default(cuid()) @db.VarChar(164)
  workspace_id String?  @db.VarChar(164)
  user_id      String   @db.VarChar(164)
  weight       Int      @default(1) @db.SmallInt
  date         DateTime
  created_at   DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("user_weights")
}
